rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }
    
    function isAdmin() {
      return isAuthenticated() && 
        request.auth.token.admin == true;
    }
    
    function isMeetingParticipant(meetingId) {
      return isAuthenticated() &&
        exists(/databases/$(database)/documents/meetings/$(meetingId)) &&
        (get(/databases/$(database)/documents/meetings/$(meetingId)).data.hostId == request.auth.uid ||
         request.auth.uid in get(/databases/$(database)/documents/meetings/$(meetingId)).data.participantIds);
    }
    
    function isMeetingHost(meetingId) {
      return isAuthenticated() &&
        exists(/databases/$(database)/documents/meetings/$(meetingId)) &&
        get(/databases/$(database)/documents/meetings/$(meetingId)).data.hostId == request.auth.uid;
    }
    
    function isValidVoiceData() {
      return request.resource.data.keys().hasAll(['confirmed', 'confidence']) &&
        request.resource.data.confidence is number &&
        request.resource.data.confidence >= 0 &&
        request.resource.data.confidence <= 1;
    }
    
    function hasRequiredMeetingFields() {
      return request.resource.data.keys().hasAll(['name', 'ownerId', 'systemPrompt', 'aiSettings']) &&
        request.resource.data.ownerId is string &&
        request.resource.data.name is string;
    }
    
    // Users collection
    match /users/{userId} {
      allow read: if isOwner(userId) || isAdmin();
      allow write: if isOwner(userId) || isAdmin();
      
      // User voice profiles (legacy support)
      match /voiceProfiles/{profileId} {
        allow read: if isOwner(userId);
        allow write: if isOwner(userId);
      }
    }
    
    // System configuration - MISSING FROM ORIGINAL RULES
    match /systemConfig/{configId} {
      allow read: if isAuthenticated();
      allow write: if isAdmin();
    }
    
    // Voice Library collection - MATCHES ACTUAL CODE
    match /voice_library/{deepgramVoiceId} {
      allow read: if isAuthenticated() && 
        (resource.data.userId == request.auth.uid ||
         resource.data.confirmed == true ||
         isAdmin());
      
      allow create: if isAuthenticated() &&
        isValidVoiceData() &&
        (!('userId' in request.resource.data) || 
         request.resource.data.userId == request.auth.uid ||
         request.resource.data.userId == null);
      
      allow update: if isAuthenticated() &&
        isValidVoiceData() &&
        (resource.data.userId == request.auth.uid ||
         isAdmin() ||
         (resource.data.confirmed == false && 
          request.resource.data.userId == request.auth.uid));
      
      allow delete: if isAuthenticated() &&
        (resource.data.userId == request.auth.uid || isAdmin());
    }
    
    // Needs Identification collection
    match /needs_identification/{requestId} {
      allow read: if isAuthenticated() &&
        (resource.data.hostId == request.auth.uid ||
         (exists(/databases/$(database)/documents/meetings/$(resource.data.meetingId)) &&
          isMeetingParticipant(resource.data.meetingId)) ||
         isAdmin());
      
      allow create: if isAuthenticated() &&
        request.resource.data.keys().hasAll(['meetingId', 'hostId', 'voiceId']);
      
      allow update: if isAuthenticated() &&
        (resource.data.hostId == request.auth.uid ||
         (exists(/databases/$(database)/documents/meetings/$(resource.data.meetingId)) &&
          isMeetingHost(resource.data.meetingId)) ||
         isAdmin());
      
      allow delete: if isAuthenticated() &&
        (resource.data.hostId == request.auth.uid || isAdmin());
    }
    
    // Meeting Types collection - FIXED FIELD NAMES
    match /meeting_types/{typeId} {
      allow read: if isAuthenticated() &&
        (resource.data.ownerId == request.auth.uid ||
         (resource.data.keys().hasAny(['regularParticipants']) &&
          request.auth.uid in resource.data.regularParticipants) ||
         isAdmin());
      
      allow create: if isAuthenticated() &&
        hasRequiredMeetingFields() &&
        request.resource.data.ownerId == request.auth.uid;
      
      allow update: if isAuthenticated() &&
        resource.data.ownerId == request.auth.uid;
      
      allow delete: if isAuthenticated() &&
        resource.data.ownerId == request.auth.uid;
    }
    
    // Voice Matches collection
    match /voice_matches/{deepgramVoiceId} {
      allow read: if isAuthenticated() &&
        (('confirmedUserId' in resource.data && 
          resource.data.confirmedUserId == request.auth.uid) || 
         isAdmin());
      
      allow write: if isAdmin();
    }
    
    // Meetings collection - ENHANCED SECURITY
    match /meetings/{meetingId} {
      allow read: if isAuthenticated() && 
        (resource.data.hostId == request.auth.uid ||
         ('participantIds' in resource.data && 
          request.auth.uid in resource.data.participantIds) ||
         isAdmin());
      
      allow create: if isAuthenticated() &&
        request.resource.data.keys().hasAll(['hostId', 'title', 'status']) &&
        request.resource.data.hostId == request.auth.uid;
      
      allow update: if isAuthenticated() && 
        (resource.data.hostId == request.auth.uid ||
         ('participantIds' in resource.data &&
          request.auth.uid in resource.data.participantIds &&
          // Participants can only update specific fields
          request.resource.data.diff(resource.data).affectedKeys()
            .hasOnly(['transcript', 'participants', 'currentModel', 'modelContext', 'status'])));
      
      allow delete: if isAuthenticated() && 
        resource.data.hostId == request.auth.uid;
        
      // Meeting subcollections
      match /notes/{noteId} {
        allow read, write: if isAuthenticated() &&
          (get(/databases/$(database)/documents/meetings/$(meetingId)).data.hostId == request.auth.uid ||
           ('participantIds' in get(/databases/$(database)/documents/meetings/$(meetingId)).data &&
            request.auth.uid in get(/databases/$(database)/documents/meetings/$(meetingId)).data.participantIds));
      }
      
      match /transcripts/{transcriptId} {
        allow read, write: if isAuthenticated() &&
          (get(/databases/$(database)/documents/meetings/$(meetingId)).data.hostId == request.auth.uid ||
           ('participantIds' in get(/databases/$(database)/documents/meetings/$(meetingId)).data &&
            request.auth.uid in get(/databases/$(database)/documents/meetings/$(meetingId)).data.participantIds));
        
        match /entries/{entryId} {
          allow read, write: if isAuthenticated() &&
            (get(/databases/$(database)/documents/meetings/$(meetingId)).data.hostId == request.auth.uid ||
             ('participantIds' in get(/databases/$(database)/documents/meetings/$(meetingId)).data &&
              request.auth.uid in get(/databases/$(database)/documents/meetings/$(meetingId)).data.participantIds));
        }
      }
      
      match /speakers/{speakerId} {
        allow read, write: if isAuthenticated() &&
          (get(/databases/$(database)/documents/meetings/$(meetingId)).data.hostId == request.auth.uid ||
           ('participantIds' in get(/databases/$(database)/documents/meetings/$(meetingId)).data &&
            request.auth.uid in get(/databases/$(database)/documents/meetings/$(meetingId)).data.participantIds));
      }
      
      match /analytics/{analyticsId} {
        allow read: if isAuthenticated() &&
          (get(/databases/$(database)/documents/meetings/$(meetingId)).data.hostId == request.auth.uid ||
           ('participantIds' in get(/databases/$(database)/documents/meetings/$(meetingId)).data &&
            request.auth.uid in get(/databases/$(database)/documents/meetings/$(meetingId)).data.participantIds));
        allow write: if isAuthenticated() &&
          get(/databases/$(database)/documents/meetings/$(meetingId)).data.hostId == request.auth.uid;
      }
    }
    
    // Audio clips collection (legacy but may be used)
    match /audioClips/{clipId} {
      allow read: if isAuthenticated();
      allow write: if isAuthenticated();
    }
    
    // Custom rules collection
    match /customRules/{ruleId} {
      allow read: if isAuthenticated() && 
        (resource.data.userId == request.auth.uid || 
         ('isPublic' in resource.data && resource.data.isPublic == true));
      allow write: if isAuthenticated() && 
        request.resource.data.userId == request.auth.uid;
    }
    
    // Agent configurations
    match /agents/{agentId} {
      allow read: if isAuthenticated();
      allow write: if isAdmin();
    }
    
    // TTS cache collection - MATCHES CODE USAGE
    match /ttsCache/{cacheId} {
      allow read: if isAuthenticated();
      allow write: if isAuthenticated();
      allow delete: if isAuthenticated();
    }
    
    // Cost tracking collections - SECURED BY USER
    match /costs/{userId} {
      allow read: if isOwner(userId) || isAdmin();
      allow write: if isOwner(userId) || isAdmin();
      
      match /apiCalls/{callId} {
        allow read: if isOwner(userId) || isAdmin();
        allow write: if isOwner(userId) || isAdmin();
      }
      
      match /budgets/{budgetId} {
        allow read: if isOwner(userId) || isAdmin();
        allow write: if isOwner(userId) || isAdmin();
      }
      
      match /analytics/{period} {
        allow read: if isOwner(userId) || isAdmin();
        allow write: if isOwner(userId) || isAdmin();
      }
    }
  }
}