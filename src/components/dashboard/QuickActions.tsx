'use client';

import React, { useState, useCallback } from 'react';
import { Mic, Plus, BarChart3 } from 'lucide-react';
import { useMeetingStore } from '@/stores/meetingStore';
import { useAuthStore } from '@/stores/authStore';
import { useAppStore } from '@/stores/appStore';
import { PrimaryButton, SecondaryButton } from '@/components/ui/Button';
import { MotionCard, MotionList } from '@/components/ui/Motion';
import { MeetingType } from '@/types';
import { cn } from '@/lib/utils';

interface QuickActionsProps {
  className?: string;
}

export const QuickActions = React.memo<QuickActionsProps>(({ className }) => {
  const { startMeeting } = useMeetingStore();
  const { addNotification } = useAppStore();
  const { user } = useAuthStore();
  const [loading, setLoading] = useState(false);

  const handleStartMeeting = useCallback(async () => {
    if (loading) return;
    setLoading(true);
    
    try {
      await startMeeting({
        id: '', // Will be generated by the service
        title: `Meeting ${new Date().toLocaleTimeString()}`,
        type: MeetingType.TEAM_STANDUP,
        status: 'active' as const,
        hostId: user?.uid || 'anonymous',
        createdBy: user?.uid || 'anonymous',
        participants: [],
        keywords: [],
        notes: [],
        appliedRules: [],
        createdAt: new Date(),
        updatedAt: new Date(),
      });
      
      addNotification({
        type: 'success',
        title: 'Meeting Started',
        message: 'Your meeting has been started successfully.',
        persistent: false,
      });
    } catch (error) {
      addNotification({
        type: 'error',
        title: 'Failed to Start Meeting',
        message: 'There was an error starting your meeting. Please try again.',
        persistent: false,
      });
    } finally {
      setLoading(false);
    }
  }, [startMeeting, user?.uid, addNotification, loading]);

  const handleScheduleMeeting = useCallback(() => {
    addNotification({
      type: 'info',
      title: 'Coming Soon',
      message: 'Meeting scheduling will be available in a future update.',
      persistent: false,
    });
  }, [addNotification]);

  const handleViewAnalytics = useCallback(() => {
    addNotification({
      type: 'info',
      title: 'Coming Soon',
      message: 'Analytics dashboard will be available in a future update.',
      persistent: false,
    });
  }, [addNotification]);

  const actions = React.useMemo(() => [
    {
      id: 'start-meeting',
      label: 'Start New Meeting',
      icon: Mic,
      onClick: handleStartMeeting,
      primary: true,
      loading,
      disabled: loading,
    },
    {
      id: 'schedule-meeting',
      label: 'Schedule Meeting',
      icon: Plus,
      onClick: handleScheduleMeeting,
      primary: false,
      loading: false,
      disabled: false,
    },
    {
      id: 'view-analytics',
      label: 'View Analytics',
      icon: BarChart3,
      onClick: handleViewAnalytics,
      primary: false,
      loading: false,
      disabled: false,
    },
  ], [handleStartMeeting, handleScheduleMeeting, handleViewAnalytics, loading]);

  return (
    <MotionCard className={cn(
      'bg-white/90 dark:bg-neutral-800/90 backdrop-blur-sm',
      'rounded-xl shadow-soft border border-neutral-200/60 dark:border-neutral-700/60',
      'p-6', // 8px grid: 24px padding
      'hover:bg-white/95 dark:hover:bg-neutral-800/95',
      className
    )}>
      <h3 className="text-h3 text-neutral-900 dark:text-neutral-100 mb-6">
        Quick Actions
      </h3>
      <MotionList className="space-y-4"> {/* 8px grid: 16px spacing */}
        {actions.map((action) => {
          const Icon = action.icon;
          
          if (action.primary) {
            return (
              <PrimaryButton
                key={action.id}
                size="lg"
                fullWidth
                loading={action.loading}
                disabled={action.disabled}
                leftIcon={<Icon />}
                onClick={action.onClick}
                className="min-h-12" // Ensure adequate touch target
                aria-label={action.label}
              >
                {action.label}
              </PrimaryButton>
            );
          }
          
          return (
            <SecondaryButton
              key={action.id}
              size="lg"
              fullWidth
              leftIcon={<Icon />}
              onClick={action.onClick}
              disabled={action.disabled}
              className="min-h-12" // Ensure adequate touch target
              aria-label={action.label}
            >
              {action.label}
            </SecondaryButton>
          );
        })}
      </MotionList>
    </MotionCard>
  );
});

QuickActions.displayName = 'QuickActions';