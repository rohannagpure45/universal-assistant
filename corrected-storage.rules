rules_version = '2';
service firebase.storage {
  match /b/{bucket}/o {
    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }
    
    function isAdmin() {
      return isAuthenticated() && 
        request.auth.token.admin == true;
    }
    
    // Voice samples storage - MATCHES ACTUAL CODE USAGE
    match /voice-samples/{deepgramVoiceId}/{fileName} {
      allow read: if isAuthenticated();
      allow write: if isAuthenticated() && 
        request.resource.size < 25 * 1024 * 1024 && // 25MB limit for long voice clips
        request.resource.contentType.matches('audio/.*');
    }
    
    // Meeting recordings - MATCHES ACTUAL CODE USAGE  
    match /meeting-recordings/{meetingId}/{fileName} {
      // Read: Meeting participants or admin
      allow read: if isAuthenticated() && (
        isAdmin() ||
        // Check if user is in meeting participants via token claim or firestore lookup
        resource.metadata.custom.hostId == request.auth.uid
      );
      allow write: if isAuthenticated() && 
        request.resource.size < 500 * 1024 * 1024 && // 500MB for full recordings
        (request.resource.contentType.matches('audio/.*') || 
         request.resource.contentType == 'application/json'); // metadata files
    }
    
    // Meeting clips - MATCHES ACTUAL CODE USAGE
    match /meeting-clips/{meetingId}/{fileName} {
      allow read: if isAuthenticated();
      allow write: if isAuthenticated() && 
        request.resource.size < 50 * 1024 * 1024 && // 50MB for clips
        request.resource.contentType.matches('audio/.*');
    }
    
    // Identification samples pending classification
    match /identification-samples/{meetingId}/{deepgramVoiceId}/{fileName} {
      allow read: if isAuthenticated();
      allow write: if isAuthenticated() && 
        request.resource.size < 25 * 1024 * 1024 &&
        request.resource.contentType.matches('audio/.*');
    }
    
    // User uploads for voice training
    match /user-uploads/{userId}/voice-training/{fileName} {
      allow read: if isOwner(userId) || isAdmin();
      allow write: if isOwner(userId) && 
        request.resource.size < 25 * 1024 * 1024 &&
        request.resource.contentType.matches('audio/.*');
    }
    
    // TTS cache - MATCHES ACTUAL CODE USAGE
    match /tts-cache/{cacheHash}.mp3 {
      allow read: if isAuthenticated();
      allow write: if isAuthenticated() && 
        request.resource.size < 10 * 1024 * 1024; // 10MB TTS files
      allow delete: if isAuthenticated(); // For cache cleanup
    }
    
    // Temporary processing files
    match /temp/{sessionId}/{fileName} {
      allow read, write: if isAuthenticated() && 
        request.resource.size < 100 * 1024 * 1024; // 100MB temp limit
      allow delete: if isAuthenticated();
    }
    
    // Exports folder
    match /exports/{userId}/{fileName} {
      allow read: if isOwner(userId) || isAdmin();
      allow write: if isOwner(userId) && 
        request.resource.size < 1024 * 1024 * 1024; // 1GB export limit
    }
    
    // System folder - admin only
    match /system/{allPaths=**} {
      allow read: if isAdmin();
      allow write: if isAdmin();
    }
    
    // Legacy audio-clips path - redirect/migrate
    match /audio-clips/{allPaths=**} {
      allow read: if isAuthenticated();
      allow write: if false; // Block new writes to legacy path
    }
    
    // Profile images (if needed)
    match /profile-images/{userId}/{fileName} {
      allow read: if isAuthenticated();
      allow write: if isOwner(userId) && 
        request.resource.size < 5 * 1024 * 1024 && // 5MB limit
        request.resource.contentType.matches('image/.*');
    }
  }
}